import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import numpy as np
import math

# Constants
PENDULUM_LENGTH = 1.0
BASE_RADIUS = 0.1
PENDULUM_RADIUS = 0.02
G = 9.81
# Constants
BASE_RADIUS = 0.1
TOP_RADIUS = 0.2
CYLINDER_HEIGHT = 2.0
CYLINDER_SIDES = 20

# Initialize Pygame
pygame.init()

# Set up the display
display = (800, 600)
pygame.display.set_mode(display, DOUBLEBUF | OPENGL)

# Set the initial perspective
gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)
glTranslatef(0.0, 0.0, -5)

# Pendulum state
pendulum_angle = np.pi  # Initial angle
pendulum_angular_velocity = 0
pendulum_angular_acceleration = 0

# Simulation parameters
dt = 0.02  # Time step

# Define a function to draw the pendulum
def draw_pendulum():
    glPushMatrix()
    glColor((1, 0, 0))
    glRotatef(math.degrees(pendulum_angle), 0, 0, 1)
    glTranslatef(0, -PENDULUM_LENGTH / 2, 0)
    glutSolidCube(PENDULUM_LENGTH)
    glPopMatrix()

def draw_base():
    # Draw the base
    glColor((0, 0, 1))
       

    quadric = gluNewQuadric()
    gluQuadricNormals(quadric, GLU_SMOOTH)

    # Draw the sides of the cylinder
    gluCylinder(quadric, BASE_RADIUS, TOP_RADIUS, CYLINDER_HEIGHT, CYLINDER_SIDES, 1)

    # Draw the top disk
    glPushMatrix()
    glTranslatef(0, 0, CYLINDER_HEIGHT)
    gluDisk(quadric, BASE_RADIUS, TOP_RADIUS, CYLINDER_SIDES, 1)
    glPopMatrix()

    # Draw the bottom disk
    gluDisk(quadric, 0, BASE_RADIUS, CYLINDER_SIDES, 1)

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()

    # Calculate pendulum state
    pendulum_angular_acceleration = (G / PENDULUM_LENGTH) * math.sin(pendulum_angle)
    pendulum_angular_velocity += pendulum_angular_acceleration * dt
    pendulum_angle += pendulum_angular_velocity * dt

    # Clear the screen
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    draw_base()
    
    # Draw the pendulum
    draw_pendulum()

    pygame.display.flip()
    pygame.time.wait(10)
