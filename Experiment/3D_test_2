import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import math

# Constants
BASE_RADIUS = 0.1
TOP_RADIUS = 0.2
CYLINDER_HEIGHT = 2.0
CYLINDER_SIDES = 20


# Constants
BASE_RADIUS = 0.1
PENDULUM_RADIUS = 0.02
PENDULUM_LENGTH = 1.0
G = 9.81

# Pendulum state
pendulum_angle = 0
pendulum_angular_velocity = 0.0



def draw_pendulum():
    glPushMatrix()
    glColor(1, 0, 0)
    glRotatef(math.degrees(pendulum_angle), 0, 1, 0)
    glTranslatef(0, -PENDULUM_LENGTH / 2, 0)
    glutSolidCube(PENDULUM_LENGTH)
    glPopMatrix()

def draw_base():
   
    # Draw the base
    glColor((0, 0, 1))
       

    quadric = gluNewQuadric()
    gluQuadricNormals(quadric, GLU_SMOOTH)

    # Draw the sides of the cylinder
    gluCylinder(quadric, BASE_RADIUS, TOP_RADIUS, CYLINDER_HEIGHT, CYLINDER_SIDES, 1)

    # Draw the top disk
    glPushMatrix()
    glTranslatef(0, 0, CYLINDER_HEIGHT)
    gluDisk(quadric, BASE_RADIUS, TOP_RADIUS, CYLINDER_SIDES, 1)
    glPopMatrix()

    # Draw the bottom disk
    gluDisk(quadric, 0, BASE_RADIUS, CYLINDER_SIDES, 1)

def update_pendulum_state():
    global pendulum_angle, pendulum_angular_velocity

    pendulum_acceleration = (G / PENDULUM_LENGTH) * math.sin(pendulum_angle)
    pendulum_angular_velocity += pendulum_acceleration * 0.02
    pendulum_angle += pendulum_angular_velocity * 0.02

def main():
    global pendulum_angle, pendulum_angular_velocity
    # Initialize Pygame
    pygame.init()
    display = (800, 600)
    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)

    # Set up the perspective
    glMatrixMode(GL_PROJECTION)
    gluPerspective(45, (4/3), 0.1, 50.0)
    glMatrixMode(GL_MODELVIEW)
    glTranslatef(0.0, 0.0, -5)
    clock = pygame.time.Clock()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        keys = pygame.key.get_pressed()
        if keys[K_LEFT]:
            pendulum_angular_velocity += 0.02
        elif keys[K_RIGHT]:
            pendulum_angular_velocity -= 0.02

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        draw_base()
        draw_pendulum()
        glutSwapBuffers()
        update_pendulum_state()
        pygame.display.flip()
        clock.tick(60)

if __name__ == "__main__":
    main()
